{"version":3,"sources":["src/index.js"],"names":["Crawler","constructor","options","_options","Object","assign","maxRequest","skipStrictDuplicates","sameOrigin","maxDepth","parallel","debugging","retryCount","retryTimeout","hostdomain","linksToCrawl","Map","linksCrawled","_actions","preRequest","x","onSuccess","evaluatePage","onRedirection","previousUrl","fetch","args","retries","_retry","Promise","race","resolve","reject","setTimeout","Error","catch","error","init","url","link","URL","origin","console","sanitizedUrl","shouldRequest","set","pull","size","crawl","collectAnchors","$","actualHref","linksCollected","protocol","map","i","e","href","attr","startsWith","filter","get","Set","skipRequest","allowOrigin","checkSameOrigin","urlSanitazed","linkAlreadyCollected","Function","info","message","evaluate","result","addToQueue","urlCollected","depth","linkEdited","canceled","currentCrawlers","pullQueue","checkMaxRequest","currentLink","keys","next","value","currentDepth","delete","then","isError","scrapePage","scrapeSucceed","urlScraped","has","response","redirected","textResponse","text","cheerio","load","all","launch","startCrawlingAt","Date","crawler","finishCrawlingAt","linksVisited","module","exports"],"mappings":"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","sourceRoot":"..","sourcesContent":["import { URL } from 'url'\nimport { isUrl } from './utils'\nimport fetch from 'node-fetch'\nimport cheerio from 'cheerio'\n\nclass Crawler {\n  constructor(options = {}) {\n    this._options = Object.assign(\n      {},\n      {\n        maxRequest: -1,\n        skipStrictDuplicates: true,\n        sameOrigin: true,\n        maxDepth: 3,\n        parallel: 5,\n        debugging: false,\n        retryCount: 2,\n        retryTimeout: 5000\n      },\n      options\n    )\n    this.hostdomain = ''\n    this.linksToCrawl = new Map()\n    this.linksCrawled = new Map()\n    this._actions = {\n      preRequest: this._options.preRequest || (x => x),\n      onSuccess: this._options.onSuccess || null,\n      evaluatePage: this._options.evaluatePage || null,\n      onRedirection: this._options.onRedirection || (({ previousUrl }) => previousUrl)\n    }\n  }\n\n  fetch(...args) {\n    let retries = 0\n    const _retry = () =>\n      Promise.race([\n        fetch(...args),\n        new Promise((resolve, reject) => setTimeout(() => reject(new Error('TIMEOUT')), this._options.retryTimeout))\n      ]).catch(error => {\n        if (retries < this._options.retryCount) {\n          retries++\n          return _retry(...args)\n        } else return Promise.reject(error)\n      })\n    return _retry()\n  }\n\n  /**\n   * Init the app.\n   * Begin with the first link, and start the pulling\n   * @return {Promise<pending>}\n   */\n  async init() {\n    try {\n      if (!isUrl(this._options.url)) throw new Error()\n      const link = new URL(this._options.url)\n      this.hostdomain = link.origin\n      if (!this.hostdomain) throw new Error()\n    } catch (error) {\n      console.error(error)\n      throw new Error('URL provided (' + this._options.url + ') is not valid')\n    }\n\n    const sanitizedUrl = await this.shouldRequest(this._options.url)\n    if (!sanitizedUrl) return\n\n    this.linksCrawled.set(sanitizedUrl)\n\n    await this.pull(sanitizedUrl, 1)\n    if (this.linksToCrawl.size > 0) await this.crawl()\n  }\n\n  /**\n   * Get all links from the page.\n   * @param {Cheerio} $\n   * @param {String} actualHref\n   * @return {Promise<Array<String>}\n   */\n  collectAnchors($, actualHref) {\n    let linksCollected = []\n    try {\n      const { origin, protocol } = new URL(actualHref)\n      linksCollected = $('a')\n        .map((i, e) => {\n          const href = $(e).attr('href') || ''\n          if (href.startsWith('//')) return protocol + href\n          else if (href.startsWith('/')) return origin + href\n          else return href\n        }) // Cheerio map method\n        .filter((i, href) => isUrl(href)) // Cheerio filter method\n        .get() // Cheerio get method to transform as an array\n    } catch (error) {\n      console.error(`Something wrong happened with this url: ${actualHref}`)\n      console.error(error)\n    }\n\n    return [...new Set(linksCollected)] // Avoid duplication\n  }\n\n  /**\n   * Check if link can be crawled (Same origin ? Already collected ? preRequest !false ?).\n   * @param {String} link\n   * @return {Promise<Boolean>}\n   */\n  async skipRequest(link) {\n    const allowOrigin = this.checkSameOrigin(link)\n    if (!allowOrigin) return true\n    const urlSanitazed = await this.shouldRequest(link)\n    if (!urlSanitazed) return true\n    if (this._options.skipStrictDuplicates && this.linkAlreadyCollected(urlSanitazed)) return true\n    return false\n  }\n\n  /**\n   * If preRequest is provided by the user, get new link or false.\n   * @param {String} link\n   * @return {Promise<String || Boolean>}\n   */\n  async shouldRequest(link) {\n    if (this._actions.preRequest instanceof Function) {\n      try {\n        const preRequest = await this._actions.preRequest(link)\n        if (preRequest === false && this._options.debugging) console.info(`\\x1b[33m Ignoring ${link} \\x1b[m`)\n        if (typeof preRequest === 'string' || preRequest === false) return preRequest\n        throw new Error('preRequest function must return a String or False')\n      } catch (error) {\n        console.error('Please try/catch your preRequest function')\n        console.error(error.message)\n      }\n    }\n    return link\n  }\n\n  /**\n   * Check if link has the same origin as the host link.\n   * @param {String} url\n   * @return {Boolean}\n   */\n  checkSameOrigin(url) {\n    if (this._options.sameOrigin) return new URL(url).origin === this.hostdomain\n    return true\n  }\n\n  /**\n   * If evaluatePage is provided by the user, await for it.\n   * @param {Cheerio} $\n   * @return {Promise}\n   */\n  async evaluate($) {\n    let result = null\n    if (this._actions.evaluatePage && this._actions.evaluatePage instanceof Function) {\n      try {\n        result = await this._actions.evaluatePage($)\n      } catch (error) {\n        console.error(error)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Add links collected to queue.\n   * @param {Array<String>} urlCollected\n   * @param {Number} depth\n   * @return {Promise}\n   */\n  async addToQueue(urlCollected, depth = 0) {\n    for (const url of urlCollected) {\n      if (depth <= this._options.maxDepth) {\n        if (!(await this.skipRequest(url))) {\n          const linkEdited = await this.shouldRequest(url)\n          this.linksToCrawl.set(linkEdited, depth)\n        }\n      }\n    }\n  }\n\n  /**\n   * Crawl links from 'linksToCrawl' and wait for having 'canceled' to true.\n   * @return {Promise>}\n   */\n  crawl() {\n    return new Promise((resolve, reject) => {\n      let canceled = false\n      let currentCrawlers = 0\n      const pullQueue = () => {\n        if (canceled) return\n        while (currentCrawlers < this._options.parallel && this.linksToCrawl.size > 0) {\n          canceled = !this.checkMaxRequest()\n          if (canceled) {\n            currentCrawlers === 0 && resolve()\n            break\n          }\n          currentCrawlers++\n          const currentLink = this.linksToCrawl.keys().next().value\n          const currentDepth = this.linksToCrawl.get(currentLink)\n          this.linksToCrawl.delete(currentLink)\n          this.linksCrawled.set(currentLink)\n          this.pull(currentLink, currentDepth)\n            .then(() => {\n              currentCrawlers--\n              if (currentCrawlers === 0 && (this.linksToCrawl.size === 0 || canceled)) resolve()\n              else pullQueue()\n            })\n            .catch(error => {\n              canceled = true\n              reject(error)\n            })\n        }\n      }\n      pullQueue()\n    })\n  }\n\n  /**\n   * Pull result and links from a page and add them to the queue.\n   * @param {String} link\n   * @param {Number} depth\n   * @return {Promise<pending>}\n   */\n  async pull(link, depth) {\n    try {\n      this._options.debugging &&\n        console.info(\n          `\\x1b[1;32m [${this.linksCrawled.size}${\n            this._options.maxRequest !== -1 ? '/' + this._options.maxRequest : ''\n          }] Crawling ${link}...\\x1b[m`\n        )\n      const { result, linksCollected, url, isError } = await this.scrapePage(link)\n      if (!isError) await this.scrapeSucceed({ urlScraped: url, result })\n      await this.addToQueue(linksCollected, depth + 1)\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  /**\n   * Know if a link will be crawled or has already been crawled.\n   * @param {String} url\n   * @return {Boolean}\n   */\n  linkAlreadyCollected(url) {\n    return this.linksCrawled.has(url) || this.linksToCrawl.has(url)\n  }\n\n  /**\n   * Know if we have exceeded the number of request max provided in the options.\n   * @return {Boolean}\n   */\n  checkMaxRequest() {\n    if (this._options.maxRequest === -1) return true\n    return this.linksCrawled.size < this._options.maxRequest\n  }\n\n  /**\n   * If onSuccess action's has been provided, await for it.\n   * @param {Object<{urlScraped: string, result: any}>}\n   * @return {Promise<pending>}\n   */\n  async scrapeSucceed({ urlScraped, result }) {\n    if (this._actions.onSuccess && this._actions.onSuccess instanceof Function) {\n      try {\n        await this._actions.onSuccess({ result, url: urlScraped })\n      } catch (error) {\n        console.error('Please try/catch your onSuccess function')\n      }\n    }\n  }\n\n  /**\n   * Scrap a page, evaluate and get new links to visit.\n   * @param {String} url\n   * @return {Promise<{linksCollected: array, result: any, url: string}>}\n   */\n  async scrapePage(url) {\n    try {\n      const response = await this.fetch(url)\n      if (response.redirected) {\n        url = await this._options.onRedirection({ previousUrl: url, response })\n        if (!url) throw new Error()\n      }\n      const textResponse = await response.text()\n      const $ = cheerio.load(textResponse)\n      const [result, linksCollected] = await Promise.all([this.evaluate($), this.collectAnchors($, url)])\n      return { linksCollected, result, url }\n    } catch (error) {\n      return {\n        linksCollected: [],\n        result: null,\n        url,\n        isError: true\n      }\n    }\n  }\n\n  /**\n   * Starting the crawl.\n   * @param {{debugging: Boolean, maxRequest: Number, parallel: Number, maxDepth: Number, sameOrigin: Boolean, skipStrictDuplicates: Boolean, retryCount: Number, retryTimeout: Number }} options Options of the crawler.\n   * @return {Promise<{startCrawlingAt: Date, finishCrawlingAt: Date, linksVisited: Number}>}\n   */\n  static async launch(options) {\n    const startCrawlingAt = new Date()\n    const crawler = new Crawler(options)\n    await crawler.init()\n    const finishCrawlingAt = new Date()\n    return { startCrawlingAt, finishCrawlingAt, linksVisited: crawler.linksCrawled.size }\n  }\n}\n\nmodule.exports = Crawler\n"],"file":"index.js"}