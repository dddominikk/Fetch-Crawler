{"version":3,"sources":["src/utils/index.js"],"names":["retryRequest","request","maxRetry","args","retries","catch","error","Promise","reject","isUrl","string","regexp","test"],"mappings":";;;;;;;AAAO,MAAMA,YAAY,GAAG,CAACC,OAAD,EAAUC,QAAV,KAAuB,CAAC,GAAGC,IAAJ,KAAa;AAC9D,MAAIC,OAAO,GAAG,CAAd;AACA,SAAOH,OAAO,CAAC,GAAGE,IAAJ,CAAP,CAAiBE,KAAjB,CAAuBC,KAAK,IAAI;AACrC,QAAIF,OAAO,GAAGF,QAAd,EAAwB;AACtBE,MAAAA,OAAO;AACP,aAAOH,OAAO,CAAC,GAAGE,IAAJ,CAAd;AACD,KAHD,MAGO,OAAOI,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACR,GALM,CAAP;AAMD,CARM;AAUP;;;;;;;;;;AAMO,MAAMG,KAAK,GAAGC,MAAM,IAAI;AAC7B,QAAMC,MAAM,GAAG,kFAAf;AACA,SAAOA,MAAM,CAACC,IAAP,CAAYF,MAAZ,CAAP;AACD,CAHM","sourceRoot":"../..","sourcesContent":["export const retryRequest = (request, maxRetry) => (...args) => {\n  let retries = 0\n  return request(...args).catch(error => {\n    if (retries < maxRetry) {\n      retries++\n      return request(...args)\n    } else return Promise.reject(error)\n  })\n}\n\n/**\n * Loosely validate a URL `string`.\n *\n * @param {String} string\n * @return {Boolean}\n */\nexport const isUrl = string => {\n  const regexp = /^(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!-/]))?/\n  return regexp.test(string)\n}\n"],"file":"index.js"}